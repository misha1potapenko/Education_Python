# üìå–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞:
# ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

# from datetime import datetime
#
#
# def my_date(str_date: str):
#     parse_date = str_date.split()
#     dict_for_day = {'–ø–æ–Ω': 'Monday', '–≤—Ç–æ': 'Tuesday', '—Å—Ä–µ': 'Wednesday',
#                     '—á–µ—Ç': 'Thursday', '–ø—è—Ç': 'Friday', '—Å—É–±': 'Saturday', '–≤–æ—Å': 'Sunday'}
#     dict_for_month = {
#         '—è–Ω–≤': 'January', '—Ñ–µ–≤': 'February', '–º–∞—Ä': 'March', '–∞–ø—Ä': 'April',
#         '–º–∞—è': 'May', '–∏—é–Ω': 'June', '–∏—é–ª': 'July', '–∞–≤–≥': 'August',
#         '—Å–µ–Ω': 'September', '–æ–∫—Ç': 'October', '–Ω–æ—è': 'November', '–¥–µ–∫': 'December'}
#     if parse_date[1][:3] in dict_for_day:
#         date_day = dict_for_day[parse_date[1][:3]]
#     if parse_date[2][:3] in dict_for_month:
#         month = dict_for_month[parse_date[2][:3]]
#     day = parse_date[0][:1]
#     string_date = date_day + " " + month + " " + "2023"
#
#     text_date = datetime.strptime(string_date, '%A %B %Y')
#     print(text_date)
#
#
# my_date('3—è —Å—Ä–µ–¥–∞ –º–∞—è')
#
#
# import datetime
# date_time_str = '2018-06-29 08:15:27.243860'
# date_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S.%f')
# print('–î–∞—Ç–∞:', date_time_obj.date())
# print('–í—Ä–µ–º—è:', date_time_obj.time())
# print('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:', date_time_obj)


'''
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-
—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
'''

import logging
from datetime import datetime, date


logging.basicConfig(filename='Task4.log',
                    filemode='w',
                    encoding='utf-8',
                    format='{asctime} {levelname:<8} —Ñ—É–Ω–∫—Ü–∏—è "{funcName}()" —Å—Ç—Ä–æ–∫–∞ {lineno:>3d} : {msg}',
                    style='{',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

months = {'—è–Ω–≤': 1, '—Ñ–µ–≤': 2,'–º–∞—Ä': 3,'–∞–ø—Ä': 4,'–º–∞—è': 5,'–∏—é–Ω': 6,'–∏—é–ª': 7,'–∞–≤–≥': 8,'—Å–µ–Ω': 9,'–æ–∫—Ç': 10,'–Ω–æ—è': 11,'–¥–µ–∫': 12}
weekdays = {'–ø–æ–Ω': 1, '–≤—Ç–æ': 2,'—Å—Ä–µ': 3,'—á–µ—Ç': 4,'–ø—è—Ç': 5,'—Å—É–±': 6,'–≤–æ—Å': 7}

def parse_date(text: str):
    '''–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –æ–±—ä–µ–∫—Ç –¥–∞—Ç—É'''
    try:
        year = datetime.now().year                     # 2023
        count, weekday_, month_ = text.split()            # 3-—è —Å—Ä–µ–¥–∞ –º–∞—è - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        month = months[month_[:3]]                       # 5 - —á–∏—Å–ª–æ
        weekday = weekdays[weekday_[:3]] - 1             # 2 - —á–∏—Å–ª–æ
        count = int(count[0])
    except Exception as exc:
        logger.info(f'{count}-–π  {weekday_}  {month_} {year} =  –æ—à–∏–±–∫–∞: {exc}')

    count_week = 0
    for day in range(1, 31 + 1):
        rezult = date(year=year, month=month, day=day)
        if rezult.weekday() == weekday:
            count_week += 1
            if count_week == count:
                logger.info(f'{count}-–π(–æ–µ) {weekday_} {month_} {year} = {rezult} ')
                return rezult




if __name__ == '__main__':
    print('1-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –º–∞—è:', parse_date('1-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –º–∞—è'))
    print('2-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è:', parse_date('2-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è'))
    print('1-—è —Å—Ä–µ–¥–∞ –º–∞—è:', parse_date('1-—è —Å—Ä–µ–¥–∞ –º–∞—è'))