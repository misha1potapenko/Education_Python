# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-
# —è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É

# üìå–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging
# –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª. üìå
# –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
# import logging
# import random
#
#
# def by_zero():
#     number = int(input('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ'))
#     if number == 0:
#         logging.basicConfig(filename='for_log.log', filemode='a', encoding='utf-8', level=logging.DEBUG)
#         logging.info('ZeroDivisionError: division by zero')
#     for_number = random.randint(1, 100) / number
#     return for_number
#
# by_zero()


# üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
# –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
# üìå–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å logging.
# üìå–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2. üìå–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ: ‚óã—É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
# ‚óã–¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è, ‚óã–∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞), ‚óã–∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞, ‚óã—Ä–µ–∑—É–ª—å—Ç–∞—Ç.
# import logging
# import time
# from typing import Callable
from datetime import datetime


#
#
# def main(func: Callable):
#     def wrapper(*args, **kwargs):
#         logging.basicConfig(filename='log_factorial.log', filemode='a', encoding='utf-8',
#                             level=logging.DEBUG)
#         my_datetime = datetime.now()
#         logging.info(f'–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} c  –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º {args} –¥–∞—Ç–∞ {my_datetime}')
#         result = func(*args, **kwargs)
#         logging.info(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {result}')
#         logging.info(f'–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}')
#         return result
#     return wrapper
#
#
# @main
# def my_factorial(number: int):
#     if number == 1:
#         return 1
#     else:
#         return number * my_factorial(number-1)
#
# print(my_factorial(8))

# üìå–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞:
# ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

def my_date(str_date: str):
    parse_date = str_date.split()
    dict_for_day = {'–ø–æ–Ω': 'Monday', '–≤—Ç–æ': 'Tuesday', '—Å—Ä–µ': 'Wednesday',
                    '—á–µ—Ç': 'Thursday', '–ø—è—Ç': 'Friday', '—Å—É–±': 'Saturday', '–≤–æ—Å': 'Sunday'}
    dict_for_month = {
        '—è–Ω–≤': 'January', '—Ñ–µ–≤': 'February', '–º–∞—Ä': 'March', '–∞–ø—Ä': 'April',
        '–º–∞—è': 'May', '–∏—é–Ω': 'June', '–∏—é–ª': 'July', '–∞–≤–≥': 'August',
        '—Å–µ–Ω': 'September', '–æ–∫—Ç': 'October', '–Ω–æ—è': 'November', '–¥–µ–∫': 'December'}
    if parse_date[1][:3] in dict_for_day:
        date_day = dict_for_day[parse_date[1][:3]]
    if parse_date[2][:3] in dict_for_month:
        month = dict_for_month[parse_date[2][:3]]
    day = parse_date[0][:1]
    string_date = date_day + " " + month + " " + "2023"

    text_date = datetime.strptime(string_date, '%A %B %Y')
    print(text_date)


my_date('3—è —Å—Ä–µ–¥–∞ –º–∞—è')
